_data/pixels.json merge=pixels


async function evaluatePixelChanges(jsonPatch) {
  if (!doesJsonMatchSchema(jsonPatch.after)) {
    fail(stripIndents`Your pixels.json file does not match the expected schema.

    expected schema: 
    {
      data: [
        // pixels go here
      ]
    }
    `);
    return false;
  }

function convertJsonToPixelSet({ data }) {
  const pixelSet = new Set();
  data.forEach(pixel => pixelSet.add(JSON.stringify(pixel)));

  return pixelSet;
}

async function evaluatePixelChanges(jsonPatch) {
  if (!doesJsonMatchSchema(jsonPatch.after)) {
    fail(stripIndents`Your pixels.json file does not match the expected schema.

    expected schema: 
    {
      data: [
        // pixels go here
      ]
    }
    `);
    return false;
  }

  const isDiffEmpty = jsonPatch.diff.length === 0;
  if (isDiffEmpty) {
    fail('This PR appears to be empty and needs a manual review.');
    return false;
  }
